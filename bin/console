#!/bin/bash

create_apps() {
  ! is_open "$BLAH_HOST" 7000 8080 && exit 1
  create_brokers 1
  create_app autoscale
  create_app marathon-lb
  create_app namenode
  create_app datanode
  create_app api
  create_app elasticsearch
  create_app serving
  create_app ui
  create_app kibana
  create_app logstash
}

create_streaming_apps() {
  ! is_open "$BLAH_HOST" 8080 && exit 1
  create_app "count-streaming"
  create_app "user-streaming"
}

create_jobs() {
  ! is_open "$BLAH_HOST" 8081 && exit 1
  create_job count
  create_job user
  create_job recommendation
  create_job similarity
  create_job funnel-items
  create_job funnel-signup
  create_job referrer
}

build_apps() {
  sbt blah-api/docker:publishLocal
  sbt blah-serving/docker:publishLocal
  sbt blah-algo/assembly
  sbt blah-algo/docker:publishLocal
}

build_images() {
  docker build -t blah/elasticsearch docker/blah-elasticsearch/
  docker build -t blah/hadoop-base docker/blah-hadoop-base/
  docker build -t blah/hadoop-master docker/blah-hadoop-master/
  docker build --build-arg NAMENODE="$BLAH_HOST" -t blah/hadoop-slave docker/blah-hadoop-slave/
  docker build -t blah/kafka-mesos docker/blah-kafka-mesos/
  docker build -t blah/spark-mesos docker/blah-spark-mesos/
  docker build -t blah/zookeeper docker/blah-zookeeper/
  docker build -t blah/java docker/blah-java/
  docker build -t blah/mesos-master docker/blah-mesos-master
  docker build \
    --build-arg DOCKER_VERSION="$(docker version --format '{{.Client.Version}}')" \
    -t blah/mesos-slave docker/blah-mesos-slave
  docker build -t blah/rust docker/blah-rust/
  docker build -t blah/kibana docker/blah-kibana/
  docker build -t blah/logstash docker/blah-logstash/
  docker build -t blah/autoscale blah-autoscale/
  docker build -t blah/ui blah-ui/
}

build_ui() {
  local project_root="$(dirname "$0")/.."
  pushd "$project_root/blah-ui" > /dev/null
  npm install
  npm run build
  popd > /dev/null

  pushd "$project_root/blah-ui-components" > /dev/null
  for d in */; do
    pushd "$d" > /dev/null
    npm install
    npm run build
    cp *.min.js ../../blah-ui/assets/js || true
    cp *.min.css ../../blah-ui/assets/css || true
    popd > /dev/null
  done
  popd > /dev/null
}

pull_images() {
  docker pull mesosphere/mesos-master:1.0.1-2.0.93.ubuntu1404
  docker pull mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404
  docker pull mesosphere/marathon:latest-dev
  docker pull mesosphere/chronos
  docker pull mesosphere/marathon-lb
}

restart_app() {
  ! is_open "$BLAH_HOST" 8080 8081 && exit 1
  declare app="$1"
  case "$app" in
    serving|api)
      sbt "$app/docker:publishLocal"
      destroy_app "$app"
      sleep 1
      create_app "$app"
      ;;
    algo)
      sbt algo/assembly
      sbt algo/docker:publishLocal
      destroy_job count
      destroy_job user
      destroy_job recommendation
      destroy_job similarity
      destroy_job funnel-items
      destroy_job funnel-signup
      destroy_job referrer
      sleep 1
      create_job count
      create_job user
      create_job recommendation
      create_job similarity
      create_job funnel-items
      create_job funnel-signup
      create_job referrer
      ;;
    ui)
      docker build -t blah/ui blah-ui/
      destroy_app "$app"
      sleep 1
      create_app "$app"
      ;;
    *)
      echo "Error: App does not exist: $app"
      echo "Usage:"
      echo "  console restart api"
      echo "  console restart serving"
      echo "  console restart algo"
      echo "  console restart ui"
      exit 1
  esac
}

create_sample_data() {
  ! is_open "api.blah.local" 80 && exit 1
  declare nb=${1:-1}
  for i in $(eval echo "{1..$nb}"); do
    echo -ne "Processing $i/$nb\r"
    local user="$(rand_user)"
    create_event "view" "$(printf '{
      "item":"%s",
      "title": "%s",
      "user": "%s",
      "email": "d.dietrich84+blah-%s@gmail.com",
      "ip": "%s",
      "userAgent": "%s",
      "referrer": "%s"
    }' "$(rand_item)" "$(rand_title)" "$user" "$user" "$(rand_ip)" "$(rand_ua)" "$(rand_referrer)")"
  done
  echo -ne '\n'
}

run_env() {
  if [[ ! -z "$DOCKER_MACHINE_NAME" ]]; then
    print_setenv BLAH_HOST "$(docker-machine ip $DOCKER_MACHINE_NAME)"
  else
    print_setenv BLAH_HOST 172.17.42.1
  fi

  print_setenv BLAH_DOCKER_BIN "$(which docker)"
}

run_test() {
  pushd "$(dirname "$0")/.." > /dev/null
  sbt test
  bin/console build-ui
  pushd "blah-ui" > /dev/null
  npm run travis-test
  popd > /dev/null
  for d in blah-ui-components/*/; do
    pushd "$d" > /dev/null
    npm test
    popd > /dev/null
  done
  popd > /dev/null
}

main() {
  set -eo pipefail

  source "$(dirname "$0")/common.sh"
  source "$(dirname "$0")/chronos.sh"
  source "$(dirname "$0")/kafka.sh"
  source "$(dirname "$0")/marathon.sh"
  source "$(dirname "$0")/samples.sh"
  source "$(dirname "$0")/fixtures.sh"
  
  local cmd="$1"; shift || true

  [[ "env" == "$cmd" ]] && run_env && exit

  if [[ -z "$BLAH_HOST" ]]; then
    echo "Error: \$BLAH_HOST is not set."
    echo "Run this command to configure your shell."
    case $SHELL in
      */fish) echo 'eval (bin/console env)'; ;;
      *)      echo 'eval $(bin/console env)'; ;;
    esac
    exit 1
  fi

  case "$cmd" in
    build-apps)
      build_apps
      ;;
    build-images)
      build_images
      ;;
    build-ui)
      build_ui
      ;;
    build-all)
      build_ui
      build_images
      build_apps
      pull_images
      ;;
    pull-images)
      pull_images
      ;;
    create-apps)
      create_apps
      ;;
    create-app)
      create_app "$@"
      ;;
    create-jobs)
      create_jobs
      ;;
    create-job)
      create_job "$@"
      ;;
    create-streaming-apps)
      create_streaming_apps
      ;;
    create-all)
      create_apps
      create_jobs
      ;;
    run-job)
      run_job "$@"
      ;;
    restart)
      restart_app "$@"
      ;;
    samples)
      create_sample_data "$@"
      ;;
    fixtures)
      fixtures "$@"
      ;;
    test)
      run_test "$@"
      ;;
    *)
      echo "Error: No such command: $cmd"
      echo "Usage: bin/console COMMAND [arg...]"
      echo "Commands:"
      echo "  build-apps                  Build application docker images"
      echo "  build-images                Build docker images"
      echo "  build-ui                    Build UI"
      echo "  build-all                   Build all"
      echo "  pull-images                 Pre-pull docker-compose images"
      echo "  create-apps                 Create apps in marathon"
      echo "  create-app                  Create a single app"
      echo "  create-streaming-apps       Create streaming apps in marathon"
      echo "  create-jobs                 Create all chronos jobs"
      echo "  create-job NAME             Create a single chronos job"
      echo "  create-all                  Create apps, streaming apps and jobs"
      echo "  run-job NAME                Run a chronos job"
      echo "  restart NAME                Compile and recreate an application"
      echo "  samples [nb] [collection]   Create some sample data"
      echo "  fixtures                    Load fixtures"
      echo "  env                         Set env vars"
      exit 1
  esac
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@"
