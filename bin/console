#!/bin/bash

create_apps() {
  ! is_open "localhost" 8080 && exit 1
  create_app blah-autoscale/marathon.json
  create_app blah-data/marathon.json
  create_app blah-events/marathon.json
  create_app blah-count/serving/marathon.json
  create_app blah-collection/serving/marathon.json
  create_app blah-funnel/serving/marathon.json
  create_app blah-referrer/serving/marathon.json
  create_app blah-recommendation/serving/marathon.json
  create_app blah-similarity/serving/marathon.json
  create_app blah-user/serving/marathon.json
  create_app blah-jobs/marathon.json
  create_app blah-ui/marathon.json
}

create_streaming_apps() {
  ! is_open "localhost" 8080 && exit 1
  create_app blah-count/algo/marathon.json
  create_app blah-user/algo/marathon.json
  create_app blah-collection/processing/marathon.json
}

create_jobs() {
  ! is_open "localhost" 8081 && exit 1
  create_job blah-count/algo/chronos.json
  create_job blah-user/algo/chronos.json
  create_job blah-recommendation/algo/chronos.json
  create_job blah-similarity/algo/chronos.json
  create_job blah-funnel/algo/chronos-items.json
  create_job blah-funnel/algo/chronos-signup.json
  create_job blah-referrer/algo/chronos.json
  create_job blah-collection/processing/chronos.json
}

build_apps() {
  local project_root="$(dirname "$0")/.."

  pushd "$project_root/blah-count/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-funnel/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-recommendation/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-similarity/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-user/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-referrer/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-count/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/count .
  popd > /dev/null
  
  pushd "$project_root/blah-collection/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/collection .
  popd > /dev/null

  pushd "$project_root/blah-funnel/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/funnel .
  popd > /dev/null
  
  pushd "$project_root/blah-referrer/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/referrer .
  popd > /dev/null
  
  pushd "$project_root/blah-recommendation/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/recommendation .
  popd > /dev/null
  
  pushd "$project_root/blah-similarity/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/similarity .
  popd > /dev/null
  
  pushd "$project_root/blah-user/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/user .
  popd > /dev/null
  
  pushd "$project_root/blah-jobs" > /dev/null
  npm install
  npm run build
  docker build -t blah/jobs .
  popd > /dev/null

  docker build -t blah/events "$project_root/blah-events"
  docker build -t blah/data "$project_root/blah-data"
  docker build -t blah/autoscale "$project_root/blah-autoscale"
  docker build -t blah/collection-processing "$project_root/blah-collection/processing"

  pushd "$project_root/blah-ui" > /dev/null
  npm install
  npm run build
  docker build --pull -t blah/ui .
  popd > /dev/null
  
}

build_images() {
  docker build --pull -t blah/elasticsearch docker/blah-elasticsearch/
  docker build --pull -t blah/kafka docker/blah-kafka/
  docker build --pull -t blah/spark-mesos docker/blah-spark-mesos/
  docker build --pull -t blah/zookeeper docker/blah-zookeeper/
  docker build --pull -t blah/java docker/blah-java/
  docker build --pull -t blah/mesos-master docker/blah-mesos-master
  docker build --pull -t blah/mesos-slave docker/blah-mesos-slave
  docker build --pull -t blah/rust docker/blah-rust/
  docker build --pull -t blah/kibana docker/blah-kibana/
  docker build -t blah/logstash docker/blah-logstash/
}

create_sample_data() {
  declare nb="${1:-1}" collection="${2:-"view"}"
  for i in $(eval echo "{1..$nb}"); do
    echo -ne "Processing $i/$nb\r"
    local user="$(rand_user)"
    create_event "$collection" "$(printf '{
      "item":"%s",
      "title": "%s",
      "user": "%s",
      "email": "d.dietrich84+blah-%s@gmail.com",
      "ip": "%s",
      "userAgent": "%s",
      "referrer": "%s"
    }' "$(rand_item)" "$(rand_title)" "$user" "$user" "$(rand_ip)" "$(rand_ua)" "$(rand_referrer)")"
  done
  echo -ne '\n'
}

run_env() {
  print_setenv BLAH_HOST "$(find_docker_ip)"
}

run_test() {
  local project_root="$(dirname "$0")/.."
  find "$project_root" -maxdepth 2 -name "algo" -type d -exec \
    sh -c "cd '{}' && sbt test" \;
  find "$project_root" -maxdepth 2 -name "serving" -type d -exec \
    sh -c "cd '{}' && cargo test" \;
}

main() {
  set -eo pipefail

  source "$(dirname "$0")/common.sh"
  source "$(dirname "$0")/chronos.sh"
  source "$(dirname "$0")/marathon.sh"
  source "$(dirname "$0")/samples.sh"
  source "$(dirname "$0")/fixtures.sh"
  
  local cmd="$1"; shift || true

  [[ "env" == "$cmd" ]] && run_env && exit

  if [[ -z "$BLAH_HOST" ]]; then
    echo "Error: \$BLAH_HOST is not set."
    echo "Run this command to configure your shell."
    case $SHELL in
      */fish) echo 'eval (bin/console env)'; ;;
      *)      echo 'eval $(bin/console env)'; ;;
    esac
    exit 1
  fi

  case "$cmd" in
    build-apps)
      build_apps
      ;;
    build-images)
      build_images
      ;;
    build-all)
      build_images
      build_apps
      ;;
    create-apps)
      create_apps
      ;;
    create-app)
      create_app "$@"
      ;;
    create-jobs)
      create_jobs
      ;;
    create-job)
      create_job "$@"
      ;;
    create-streaming-apps)
      create_streaming_apps
      ;;
    create-all)
      create_apps
      create_jobs
      ;;
    run-job)
      run_job "$@"
      ;;
    samples)
      create_sample_data "$@"
      ;;
    fixtures)
      fixtures "$@"
      ;;
    test)
      run_test
      ;;
    local-forwarding)
      create_forwarding_app "$@"
      ;;
    *)
      echo "Error: No such command: $cmd"
      echo "Usage: bin/console COMMAND [arg...]"
      echo "Commands:"
      echo "  build-apps                        Build application docker images"
      echo "  build-images                      Build docker images"
      echo "  build-all                         Build all"
      echo "  create-apps                       Create apps in marathon"
      echo "  create-app [marathon_file]        Create a single app"
      echo "  create-streaming-apps             Create streaming apps in marathon"
      echo "  create-jobs                       Create all chronos jobs"
      echo "  create-job [marathon_file]        Create a single chronos job"
      echo "  create-all                        Create apps, streaming apps and jobs"
      echo "  run-job [name]                    Run a chronos job"
      echo "  samples [nb] [collection]         Create some sample data"
      echo "  fixtures                          Load fixtures"
      echo "  env                               Set env vars"
      echo "  test                              Run tests"
      echo "  local-forwarding [port] [path...] Add a haproxy entry for a local app"
      exit 1
  esac
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@"
