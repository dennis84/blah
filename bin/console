#!/bin/bash

create_apps() {
  ! is_open "$BLAH_HOST" 7000 8080 && exit 1
  create_app marathon-lb
  create_app autoscale
  create_app data
  create_app events
  create_app count
  create_app collection
  create_app funnel
  create_app referrer
  create_app recommendation
  create_app similarity
  create_app user
  create_app jobs
  create_app ui
  create_app kibana
  create_app logstash
}

create_streaming_apps() {
  ! is_open "$BLAH_HOST" 8080 && exit 1
  create_app "count-streaming"
  create_app "user-streaming"
}

create_jobs() {
  ! is_open "$BLAH_HOST" 8081 && exit 1
  create_job count
  create_job user
  create_job recommendation
  create_job similarity
  create_job funnel-items
  create_job funnel-signup
  create_job referrer
  create_job collection
}

build_apps() {
  local project_root="$(dirname "$0")/.."

  pushd "$project_root/blah-collection/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-count/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-funnel/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-recommendation/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-similarity/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-user/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-referrer/algo" > /dev/null
  sbt assembly
  sbt docker:publishLocal
  popd > /dev/null

  pushd "$project_root/blah-count/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/count .
  popd > /dev/null
  
  pushd "$project_root/blah-collection/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/collection .
  popd > /dev/null
  
  pushd "$project_root/blah-funnel/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/funnel .
  popd > /dev/null
  
  pushd "$project_root/blah-referrer/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/referrer .
  popd > /dev/null
  
  pushd "$project_root/blah-recommendation/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/recommendation .
  popd > /dev/null
  
  pushd "$project_root/blah-similarity/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/similarity .
  popd > /dev/null
  
  pushd "$project_root/blah-user/serving" > /dev/null
  npm install
  npm run build
  docker build -t blah/user .
  popd > /dev/null
  
  pushd "$project_root/blah-jobs" > /dev/null
  npm install
  npm run build
  docker build -t blah/jobs .
  popd > /dev/null

  pushd "$project_root/blah-ui" > /dev/null
  npm install
  npm run build
  docker build -t blah/ui .
  popd > /dev/null
  
  pushd "$project_root/blah-events" > /dev/null
  docker build -t blah/events .
  popd > /dev/null

  pushd "$project_root/blah-data" > /dev/null
  docker build -t blah/data .
  popd > /dev/null

  pushd "$project_root/blah-autoscale" > /dev/null
  docker build -t blah/autoscale .
  popd > /dev/null
}

build_images() {
  docker build -t blah/elasticsearch docker/blah-elasticsearch/
  docker build -t blah/kafka docker/blah-kafka/
  docker build -t blah/spark-mesos docker/blah-spark-mesos/
  docker build -t blah/zookeeper docker/blah-zookeeper/
  docker build -t blah/java docker/blah-java/
  docker build -t blah/mesos-master docker/blah-mesos-master
  docker build -t blah/mesos-slave docker/blah-mesos-slave
  docker build -t blah/rust docker/blah-rust/
  docker build -t blah/kibana docker/blah-kibana/
  docker build -t blah/logstash docker/blah-logstash/
}

pull_images() {
  docker pull mesosphere/mesos-master:1.0.1-2.0.93.ubuntu1404
  docker pull mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404
  docker pull mesosphere/marathon:latest-dev
  docker pull mesosphere/chronos
  docker pull mesosphere/marathon-lb
}

create_sample_data() {
  ! is_open "data.blah.local" 80 && exit 1
  declare nb=${1:-1}
  for i in $(eval echo "{1..$nb}"); do
    echo -ne "Processing $i/$nb\r"
    local user="$(rand_user)"
    create_event "view" "$(printf '{
      "item":"%s",
      "title": "%s",
      "user": "%s",
      "email": "d.dietrich84+blah-%s@gmail.com",
      "ip": "%s",
      "userAgent": "%s",
      "referrer": "%s"
    }' "$(rand_item)" "$(rand_title)" "$user" "$user" "$(rand_ip)" "$(rand_ua)" "$(rand_referrer)")"
  done
  echo -ne '\n'
}

run_env() {
  print_setenv BLAH_HOST 172.17.42.1
}

run_test() {
  local project_root="$(dirname "$0")/.."
  find "$project_root" -maxdepth 2 -name "algo" -type d -exec \
    sh -c "cd '{}' && sbt test" \;
  find "$project_root" -maxdepth 2 -name "serving" -type d -exec \
    sh -c "cd '{}' && cargo test" \;
}

main() {
  set -eo pipefail

  source "$(dirname "$0")/common.sh"
  source "$(dirname "$0")/chronos.sh"
  source "$(dirname "$0")/marathon.sh"
  source "$(dirname "$0")/samples.sh"
  source "$(dirname "$0")/fixtures.sh"
  
  local cmd="$1"; shift || true

  [[ "env" == "$cmd" ]] && run_env && exit

  if [[ -z "$BLAH_HOST" ]]; then
    echo "Error: \$BLAH_HOST is not set."
    echo "Run this command to configure your shell."
    case $SHELL in
      */fish) echo 'eval (bin/console env)'; ;;
      *)      echo 'eval $(bin/console env)'; ;;
    esac
    exit 1
  fi

  case "$cmd" in
    build-apps)
      build_apps
      ;;
    build-images)
      build_images
      ;;
    build-all)
      build_images
      build_apps
      pull_images
      ;;
    pull-images)
      pull_images
      ;;
    create-apps)
      create_apps
      ;;
    create-app)
      create_app "$@"
      ;;
    create-jobs)
      create_jobs
      ;;
    create-job)
      create_job "$@"
      ;;
    create-streaming-apps)
      create_streaming_apps
      ;;
    create-all)
      create_apps
      create_jobs
      ;;
    run-job)
      run_job "$@"
      ;;
    samples)
      create_sample_data "$@"
      ;;
    fixtures)
      fixtures "$@"
      ;;
    test)
      run_test
      ;;
    *)
      echo "Error: No such command: $cmd"
      echo "Usage: bin/console COMMAND [arg...]"
      echo "Commands:"
      echo "  build-apps                  Build application docker images"
      echo "  build-images                Build docker images"
      echo "  build-all                   Build all"
      echo "  pull-images                 Pre-pull docker-compose images"
      echo "  create-apps                 Create apps in marathon"
      echo "  create-app                  Create a single app"
      echo "  create-streaming-apps       Create streaming apps in marathon"
      echo "  create-jobs                 Create all chronos jobs"
      echo "  create-job NAME             Create a single chronos job"
      echo "  create-all                  Create apps, streaming apps and jobs"
      echo "  run-job NAME                Run a chronos job"
      echo "  samples [nb] [collection]   Create some sample data"
      echo "  fixtures                    Load fixtures"
      echo "  env                         Set env vars"
      echo "  test                        Run tests"
      exit 1
  esac
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@"
